# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2019-03-28 16:06
from __future__ import unicode_literals

import cartoview_cms.models.streamfields.Blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0019_delete_filter'),
        ('app_manager', '0010_auto_20181118_1333'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'verbose_name': 'Form with Email',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GenericModule',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('selected_template', models.CharField(choices=[(b'cartoview_cms/generic_module/generic_module_default.html', b'Default Template'), (b'cartoview_cms/generic_module/generic_module_focused.html', b'Focused Template')], default=b'cartoview_cms/generic_module/generic_module_default.html', max_length=255)),
                ('first_title', models.CharField(blank=True, help_text=b'You should select the <b>focused template</b> for this to work!', max_length=120, null=True)),
                ('second_title', models.CharField(blank=True, help_text=b'You should select the <b>focused template</b> for this to work!', max_length=120, null=True)),
                ('public_display', models.BooleanField(default=False, help_text=b"If checked, this module's children will be visible in <b>frontend</b>", verbose_name=b'Public Display')),
                ('public_display_title', models.CharField(blank=True, help_text=b'You should check the previous field for this to work!', max_length=120, null=True)),
            ],
            options={
                'verbose_name': 'Generic Module',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GenericPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('selected_template', models.CharField(choices=[(b'cartoview_cms/generic_module/generic_page_default.html', b'Default Template')], default=b'cartoview_cms/generic_module/generic_page_default.html', max_length=255)),
                ('abstract', models.CharField(blank=True, max_length=500, null=True)),
                ('focused', models.BooleanField(default=False, help_text=b'You should select the <b>focused template</b> for the Generic Module!.', verbose_name=b'Focused')),
                ('is_redirect', models.BooleanField(default=False, help_text=b'Redirct to an <b>External</b> link', verbose_name=b'Redirect External')),
                ('redirect_link', models.CharField(blank=True, max_length=500, null=True)),
                ('body', wagtail.core.fields.StreamField([(b'header', wagtail.core.blocks.StructBlock([(b'header', wagtail.core.blocks.ChoiceBlock(choices=[(b'h1', b'H1'), (b'h2', b'H2'), (b'h3', b'H3'), (b'h4', b'H4'), (b'h5', b'H5'), (b'h6', b'H6')], label=b'Header Size')), (b'text', wagtail.core.blocks.CharBlock(label=b'Text', max_length=50))])), (b'paragraph', wagtail.core.blocks.RichTextBlock(classname=b'full')), (b'document', wagtail.documents.blocks.DocumentChooserBlock()), (b'list', wagtail.core.blocks.StructBlock([(b'content', wagtail.core.blocks.ListBlock(wagtail.core.blocks.CharBlock(), label=b'Items'))])), (b'accordions', wagtail.core.blocks.StructBlock([(b'title', wagtail.core.blocks.CharBlock(label=b'Title', max_length=50)), (b'content', wagtail.core.blocks.RichTextBlock(label=b'Content'))])), (b'image_text_overlay', wagtail.core.blocks.StructBlock([(b'image', wagtail.images.blocks.ImageChooserBlock(label=b'Image')), (b'text', wagtail.core.blocks.CharBlock(label=b'Text', max_length=200))])), (b'image_gallery', wagtail.core.blocks.StructBlock([(b'image', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), icon=b'image', label=b'Image'))])), (b'map', wagtail.core.blocks.StructBlock([(b'map', cartoview_cms.models.streamfields.Blocks.MapChooserBlock(required=True))])), (b'separator', cartoview_cms.models.streamfields.Blocks.SeparatorBlock()), (b'related_users', wagtail.core.blocks.StructBlock([(b'title', wagtail.core.blocks.CharBlock(help_text=b'Section title as it appears to the users', label=b'Title', max_length=200)), (b'users', wagtail.core.blocks.ListBlock(cartoview_cms.models.streamfields.Blocks.UserChooserBlock(required=True), label=b'Users'))])), (b'related_module', wagtail.core.blocks.StructBlock([(b'title', wagtail.core.blocks.CharBlock(help_text=b'Section title as it appears to the users', label=b'Title', max_length=200)), (b'display_size', wagtail.core.blocks.ChoiceBlock(choices=[(b'1', b'1 - Smallest'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4 - Recommended'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12 - Largest')], label=b'Display Size')), (b'pages', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(target_model=['cartoview_cms.GenericPage']), label=b'Items'))]))], blank=True)),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='MenuLink',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('link_external', models.URLField(blank=True, verbose_name=b'External link')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='genericpage',
            name='related_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='genericpage',
            name='thumbnail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='cartoview_cms.FormPage'),
        ),
    ]
