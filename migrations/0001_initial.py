# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-03-03 15:18
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtaildocs.blocks
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('base', '0036_auto_20190227_1124'),
        ('wagtailimages', '0019_delete_filter'),
        ('app_manager', '0010_auto_20181118_1333'),
        ('maps', '0030_auto_20180414_2120'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseGeoPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('abstract', models.CharField(blank=True, max_length=120, null=True)),
                ('body', wagtail.wagtailcore.fields.StreamField([(b'heading', wagtail.wagtailcore.blocks.CharBlock(classname=b'full title')), (b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock(classname=b'full')), (b'email_field', wagtail.wagtailcore.blocks.EmailBlock()), (b'integer', wagtail.wagtailcore.blocks.IntegerBlock()), (b'float', wagtail.wagtailcore.blocks.FloatBlock()), (b'decimal', wagtail.wagtailcore.blocks.DecimalBlock()), (b'url', wagtail.wagtailcore.blocks.URLBlock()), (b'check_box', wagtail.wagtailcore.blocks.BooleanBlock()), (b'date', wagtail.wagtailcore.blocks.DateBlock()), (b'time', wagtail.wagtailcore.blocks.TimeBlock()), (b'date_time', wagtail.wagtailcore.blocks.DateTimeBlock()), (b'HTML', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'quote', wagtail.wagtailcore.blocks.BlockQuoteBlock()), (b'choice', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[])), (b'page_chooser', wagtail.wagtailcore.blocks.PageChooserBlock()), (b'document', wagtail.wagtaildocs.blocks.DocumentChooserBlock()), (b'image', wagtail.wagtailimages.blocks.ImageChooserBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock())], blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogCategoryIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.wagtailcore.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(verbose_name=b'Post date')),
                ('intro', models.CharField(max_length=250)),
                ('body', wagtail.wagtailcore.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPostGalleryImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='cartoview_cms.BlogPost')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPostTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='cartoview_cms.BlogPost')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cartoview_cms_blogposttag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogTagIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ContentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Content Categories',
            },
        ),
        migrations.CreateModel(
            name='GeoPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('abstract', models.CharField(blank=True, max_length=120, null=True)),
                ('body', wagtail.wagtailcore.fields.StreamField([(b'heading', wagtail.wagtailcore.blocks.CharBlock(classname=b'full title')), (b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock(classname=b'full')), (b'email_field', wagtail.wagtailcore.blocks.EmailBlock()), (b'integer', wagtail.wagtailcore.blocks.IntegerBlock()), (b'float', wagtail.wagtailcore.blocks.FloatBlock()), (b'decimal', wagtail.wagtailcore.blocks.DecimalBlock()), (b'url', wagtail.wagtailcore.blocks.URLBlock()), (b'check_box', wagtail.wagtailcore.blocks.BooleanBlock()), (b'date', wagtail.wagtailcore.blocks.DateBlock()), (b'time', wagtail.wagtailcore.blocks.TimeBlock()), (b'date_time', wagtail.wagtailcore.blocks.DateTimeBlock()), (b'HTML', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'quote', wagtail.wagtailcore.blocks.BlockQuoteBlock()), (b'choice', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[])), (b'page_chooser', wagtail.wagtailcore.blocks.PageChooserBlock()), (b'document', wagtail.wagtaildocs.blocks.DocumentChooserBlock()), (b'image', wagtail.wagtailimages.blocks.ImageChooserBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock())], blank=True)),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
                ('content_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cartoview_cms.ContentCategory')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='MapSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_title', models.CharField(blank=True, max_length=120, null=True)),
                ('map_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.Map')),
            ],
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='MenuLink',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('link_external', models.URLField(blank=True, verbose_name=b'External link')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CoastalCliffInstability',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Coastal Cliff Instability Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='CoastalErosion',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Coastal Erosion Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='GroundWaterQuality',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Ground Water Quality Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='LandSubsidence',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Land Subsidence Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='SeaLevelRise',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Sea Level Rise Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='SeaWaterIntrusion',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Sea Water Intrusion Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.CreateModel(
            name='WaterPollution',
            fields=[
                ('basegeopage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cartoview_cms.BaseGeoPage')),
                ('app_instance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_manager.AppInstance')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.TopicCategory')),
            ],
            options={
                'verbose_name_plural': 'Water Pollution Topics',
            },
            bases=('cartoview_cms.basegeopage',),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='categories',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to='cartoview_cms.ContentCategory'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='cartoview_cms.BlogPostTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='basegeopage',
            name='map',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cartoview_cms.MapSnippet'),
        ),
    ]
